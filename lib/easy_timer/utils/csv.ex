defmodule EasyTimer.CSV do
  @moduledoc """
  Parse a CSV file and return a list of maps or errors.
  """

  @doc """
  Load a CSV file and decode each line into one of 2 lists: errors and data.
  Errors are auto generated by the CSV library and include info for each row.
  Succesfully decoded rows are turned into maps with atom keys and string values, and row values are added

  Return values:
  File won't open:{:error, :failed_to_open, nil}
  No errors:{:ok, data}
  Errors:{:error, :parsing_errors, errors}
  """
  def load(filepath) do
    try do
      File.stream!(filepath)
      |> CSV.decode(headers: true)
      |> Enum.reduce(
        %{errors: [], data: [], id: 0},
        fn line, %{errors: errors, data: data, id: id} = result ->
          case line do
            {:ok, line_data} ->
              atom_key_line =
                Enum.reduce(line_data, %{}, fn {k, v}, acc ->
                  Map.put(acc, String.to_atom(k), v)
                end)
                |> Map.put(:id, id + 1)

              %{result | data: [atom_key_line | data], id: id + 1}

            {:error, reason} ->
              %{result | errors: [reason | errors]}
          end
        end
      )
    rescue
      File.Error ->
        {:error, %{type: "file_error", errors: nil}}
    else
      %{errors: [], data: data} ->
        {:ok, Enum.reverse(data)}

      %{errors: errors} ->
        {:error, %{type: "parsing_errors", errors: errors}}
    end
  end
end
